// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TendermintCryptoProofOps ProofOps is Merkle proof defined by the list of ProofOps
//
// swagger:model tendermint.crypto.ProofOps
type TendermintCryptoProofOps struct {

	// ops
	Ops []*TendermintCryptoProofOpsOpsItems0 `json:"ops"`
}

// Validate validates this tendermint crypto proof ops
func (m *TendermintCryptoProofOps) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TendermintCryptoProofOps) validateOps(formats strfmt.Registry) error {
	if swag.IsZero(m.Ops) { // not required
		return nil
	}

	for i := 0; i < len(m.Ops); i++ {
		if swag.IsZero(m.Ops[i]) { // not required
			continue
		}

		if m.Ops[i] != nil {
			if err := m.Ops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tendermint crypto proof ops based on the context it is used
func (m *TendermintCryptoProofOps) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TendermintCryptoProofOps) contextValidateOps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ops); i++ {

		if m.Ops[i] != nil {
			if err := m.Ops[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TendermintCryptoProofOps) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TendermintCryptoProofOps) UnmarshalBinary(b []byte) error {
	var res TendermintCryptoProofOps
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TendermintCryptoProofOpsOpsItems0 ProofOp defines an operation used for calculating Merkle root
// The data could be arbitrary format, providing nessecary data
// for example neighbouring node hash
//
// swagger:model TendermintCryptoProofOpsOpsItems0
type TendermintCryptoProofOpsOpsItems0 struct {

	// data
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// key
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this tendermint crypto proof ops ops items0
func (m *TendermintCryptoProofOpsOpsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tendermint crypto proof ops ops items0 based on context it is used
func (m *TendermintCryptoProofOpsOpsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TendermintCryptoProofOpsOpsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TendermintCryptoProofOpsOpsItems0) UnmarshalBinary(b []byte) error {
	var res TendermintCryptoProofOpsOpsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
