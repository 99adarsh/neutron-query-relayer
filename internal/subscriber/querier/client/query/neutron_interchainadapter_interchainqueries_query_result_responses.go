// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NeutronInterchainadapterInterchainqueriesQueryResultReader is a Reader for the NeutronInterchainadapterInterchainqueriesQueryResult structure.
type NeutronInterchainadapterInterchainqueriesQueryResultReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NeutronInterchainadapterInterchainqueriesQueryResultReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNeutronInterchainadapterInterchainqueriesQueryResultOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewNeutronInterchainadapterInterchainqueriesQueryResultDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewNeutronInterchainadapterInterchainqueriesQueryResultOK creates a NeutronInterchainadapterInterchainqueriesQueryResultOK with default headers values
func NewNeutronInterchainadapterInterchainqueriesQueryResultOK() *NeutronInterchainadapterInterchainqueriesQueryResultOK {
	return &NeutronInterchainadapterInterchainqueriesQueryResultOK{}
}

/* NeutronInterchainadapterInterchainqueriesQueryResultOK describes a response with status code 200, with default header values.

A successful response.
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOK struct {
	Payload *NeutronInterchainadapterInterchainqueriesQueryResultOKBody
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOK) Error() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/interchainqueries/query_result][%d] neutronInterchainadapterInterchainqueriesQueryResultOK  %+v", 200, o.Payload)
}
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOK) GetPayload() *NeutronInterchainadapterInterchainqueriesQueryResultOKBody {
	return o.Payload
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NeutronInterchainadapterInterchainqueriesQueryResultOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNeutronInterchainadapterInterchainqueriesQueryResultDefault creates a NeutronInterchainadapterInterchainqueriesQueryResultDefault with default headers values
func NewNeutronInterchainadapterInterchainqueriesQueryResultDefault(code int) *NeutronInterchainadapterInterchainqueriesQueryResultDefault {
	return &NeutronInterchainadapterInterchainqueriesQueryResultDefault{
		_statusCode: code,
	}
}

/* NeutronInterchainadapterInterchainqueriesQueryResultDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type NeutronInterchainadapterInterchainqueriesQueryResultDefault struct {
	_statusCode int

	Payload *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody
}

// Code gets the status code for the neutron interchainadapter interchainqueries query result default response
func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefault) Code() int {
	return o._statusCode
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefault) Error() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/interchainqueries/query_result][%d] NeutronInterchainadapterInterchainqueriesQueryResult default  %+v", o._statusCode, o.Payload)
}
func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefault) GetPayload() *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody {
	return o.Payload
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody neutron interchainadapter interchainqueries query result default body
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody
*/
type NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*NeutronInterchainadapterInterchainqueriesQueryResultDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result default body
func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NeutronInterchainadapterInterchainqueriesQueryResult default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result default body based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NeutronInterchainadapterInterchainqueriesQueryResult default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := anypb.New(foo)
//      if err != nil {
//        ...
//      }
//      ...
//      foo := &pb.Foo{}
//      if err := any.UnmarshalTo(foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultDefaultBodyDetailsItems0
*/
type NeutronInterchainadapterInterchainqueriesQueryResultDefaultBodyDetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	AtType string `json:"@type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result default body details items0
func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result default body details items0 based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBody neutron interchainadapter interchainqueries query result o k body
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBody
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBody struct {

	// result
	Result *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult `json:"result,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result o k body based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {
		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBody) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult neutron interchainadapter interchainqueries query result o k body result
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult struct {

	// allow kv callbacks
	AllowKvCallbacks bool `json:"allow_kv_callbacks,omitempty"`

	// block
	Block *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock `json:"block,omitempty"`

	// height
	Height string `json:"height,omitempty"`

	// kv results
	KvResults []*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0 `json:"kv_results"`

	// revision
	Revision string `json:"revision,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKvResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult) validateBlock(formats strfmt.Registry) error {
	if swag.IsZero(o.Block) { // not required
		return nil
	}

	if o.Block != nil {
		if err := o.Block.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult) validateKvResults(formats strfmt.Registry) error {
	if swag.IsZero(o.KvResults) { // not required
		return nil
	}

	for i := 0; i < len(o.KvResults); i++ {
		if swag.IsZero(o.KvResults[i]) { // not required
			continue
		}

		if o.KvResults[i] != nil {
			if err := o.KvResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "kv_results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result o k body result based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKvResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult) contextValidateBlock(ctx context.Context, formats strfmt.Registry) error {

	if o.Block != nil {
		if err := o.Block.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult) contextValidateKvResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KvResults); i++ {

		if o.KvResults[i] != nil {
			if err := o.KvResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "kv_results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock neutron interchainadapter interchainqueries query result o k body result block
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock struct {

	// header
	Header *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockHeader `json:"header,omitempty"`

	// next block header
	NextBlockHeader *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockNextBlockHeader `json:"next_block_header,omitempty"`

	// tx
	Tx *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx `json:"tx,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result block
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNextBlockHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock) validateHeader(formats strfmt.Registry) error {
	if swag.IsZero(o.Header) { // not required
		return nil
	}

	if o.Header != nil {
		if err := o.Header.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "header")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock) validateNextBlockHeader(formats strfmt.Registry) error {
	if swag.IsZero(o.NextBlockHeader) { // not required
		return nil
	}

	if o.NextBlockHeader != nil {
		if err := o.NextBlockHeader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "next_block_header")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock) validateTx(formats strfmt.Registry) error {
	if swag.IsZero(o.Tx) { // not required
		return nil
	}

	if o.Tx != nil {
		if err := o.Tx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result o k body result block based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNextBlockHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	if o.Header != nil {
		if err := o.Header.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "header")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock) contextValidateNextBlockHeader(ctx context.Context, formats strfmt.Registry) error {

	if o.NextBlockHeader != nil {
		if err := o.NextBlockHeader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "next_block_header")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock) contextValidateTx(ctx context.Context, formats strfmt.Registry) error {

	if o.Tx != nil {
		if err := o.Tx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockHeader We need to know block X to verify inclusion of transaction for block X
//
// `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := anypb.New(foo)
//      if err != nil {
//        ...
//      }
//      ...
//      foo := &pb.Foo{}
//      if err := any.UnmarshalTo(foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockHeader
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockHeader struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	AtType string `json:"@type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result block header
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockHeader) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result o k body result block header based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockHeader) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockHeader) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockNextBlockHeader We need to know block X+1 to verify response of transaction for block X
// since LastResultsHash is root hash of all results from the txs from the previous block
//
// `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := anypb.New(foo)
//      if err != nil {
//        ...
//      }
//      ...
//      foo := &pb.Foo{}
//      if err := any.UnmarshalTo(foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockNextBlockHeader
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockNextBlockHeader struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	AtType string `json:"@type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result block next block header
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockNextBlockHeader) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result o k body result block next block header based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockNextBlockHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockNextBlockHeader) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockNextBlockHeader) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockNextBlockHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx neutron interchainadapter interchainqueries query result o k body result block tx
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx struct {

	// is body of the transaction
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// delivery proof
	DeliveryProof *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxDeliveryProof `json:"delivery_proof,omitempty"`

	// inclusion proof
	InclusionProof *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxInclusionProof `json:"inclusion_proof,omitempty"`

	// response
	Response *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponse `json:"response,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result block tx
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeliveryProof(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInclusionProof(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx) validateDeliveryProof(formats strfmt.Registry) error {
	if swag.IsZero(o.DeliveryProof) { // not required
		return nil
	}

	if o.DeliveryProof != nil {
		if err := o.DeliveryProof.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "tx" + "." + "delivery_proof")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx) validateInclusionProof(formats strfmt.Registry) error {
	if swag.IsZero(o.InclusionProof) { // not required
		return nil
	}

	if o.InclusionProof != nil {
		if err := o.InclusionProof.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "tx" + "." + "inclusion_proof")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(o.Response) { // not required
		return nil
	}

	if o.Response != nil {
		if err := o.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "tx" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result o k body result block tx based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDeliveryProof(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInclusionProof(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx) contextValidateDeliveryProof(ctx context.Context, formats strfmt.Registry) error {

	if o.DeliveryProof != nil {
		if err := o.DeliveryProof.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "tx" + "." + "delivery_proof")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx) contextValidateInclusionProof(ctx context.Context, formats strfmt.Registry) error {

	if o.InclusionProof != nil {
		if err := o.InclusionProof.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "tx" + "." + "inclusion_proof")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	if o.Response != nil {
		if err := o.Response.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "tx" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxDeliveryProof is the Merkle Proof which proves existence of response in block with height next_block_header.Height
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxDeliveryProof
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxDeliveryProof struct {

	// aunts
	Aunts []strfmt.Base64 `json:"aunts"`

	// index
	Index string `json:"index,omitempty"`

	// leaf hash
	// Format: byte
	LeafHash strfmt.Base64 `json:"leaf_hash,omitempty"`

	// total
	Total string `json:"total,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result block tx delivery proof
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxDeliveryProof) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result o k body result block tx delivery proof based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxDeliveryProof) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxDeliveryProof) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxDeliveryProof) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxDeliveryProof
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxInclusionProof is the Merkle Proof which proves existence of data in block with height header.Height
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxInclusionProof
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxInclusionProof struct {

	// aunts
	Aunts []strfmt.Base64 `json:"aunts"`

	// index
	Index string `json:"index,omitempty"`

	// leaf hash
	// Format: byte
	LeafHash strfmt.Base64 `json:"leaf_hash,omitempty"`

	// total
	Total string `json:"total,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result block tx inclusion proof
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxInclusionProof) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result o k body result block tx inclusion proof based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxInclusionProof) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxInclusionProof) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxInclusionProof) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxInclusionProof
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponse neutron interchainadapter interchainqueries query result o k body result block tx response
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponse
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponse struct {

	// code
	Code int64 `json:"code,omitempty"`

	// codespace
	Codespace string `json:"codespace,omitempty"`

	// data
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// events
	Events []*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0 `json:"events"`

	// gas used
	GasUsed string `json:"gas_used,omitempty"`

	// gas wanted
	GasWanted string `json:"gas_wanted,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// log
	Log string `json:"log,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result block tx response
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponse) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(o.Events) { // not required
		return nil
	}

	for i := 0; i < len(o.Events); i++ {
		if swag.IsZero(o.Events[i]) { // not required
			continue
		}

		if o.Events[i] != nil {
			if err := o.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "tx" + "." + "response" + "." + "events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result o k body result block tx response based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponse) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Events); i++ {

		if o.Events[i] != nil {
			if err := o.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neutronInterchainadapterInterchainqueriesQueryResultOK" + "." + "result" + "." + "block" + "." + "tx" + "." + "response" + "." + "events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponse) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponse) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0 Event allows application developers to attach additional information to
// ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
// Later, transactions may be queried using these events.
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0 struct {

	// attributes
	Attributes []*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0AttributesItems0 `json:"attributes"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result block tx response events items0
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(o.Attributes); i++ {
		if swag.IsZero(o.Attributes[i]) { // not required
			continue
		}

		if o.Attributes[i] != nil {
			if err := o.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result o k body result block tx response events items0 based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Attributes); i++ {

		if o.Attributes[i] != nil {
			if err := o.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0AttributesItems0 EventAttribute is a single key-value pair, associated with an event.
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0AttributesItems0
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0AttributesItems0 struct {

	// index
	Index bool `json:"index,omitempty"`

	// key
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result block tx response events items0 attributes items0
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0AttributesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result o k body result block tx response events items0 attributes items0 based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0AttributesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0AttributesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0AttributesItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultBlockTxResponseEventsItems0AttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0 neutron interchainadapter interchainqueries query result o k body result kv results items0
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0 struct {

	// proof
	Proof *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0Proof `json:"Proof,omitempty"`

	// is the key in IAVL store
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// is the substore name (acc, staking, etc.)
	StoragePrefix string `json:"storage_prefix,omitempty"`

	// is the value in IAVL store
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result kv results items0
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProof(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0) validateProof(formats strfmt.Registry) error {
	if swag.IsZero(o.Proof) { // not required
		return nil
	}

	if o.Proof != nil {
		if err := o.Proof.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Proof")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result o k body result kv results items0 based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProof(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0) contextValidateProof(ctx context.Context, formats strfmt.Registry) error {

	if o.Proof != nil {
		if err := o.Proof.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Proof")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0Proof is the Merkle Proof which proves existence of key-value pair in IAVL storage
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0Proof
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0Proof struct {

	// ops
	Ops []*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0ProofOpsItems0 `json:"ops"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result kv results items0 proof
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0Proof) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0Proof) validateOps(formats strfmt.Registry) error {
	if swag.IsZero(o.Ops) { // not required
		return nil
	}

	for i := 0; i < len(o.Ops); i++ {
		if swag.IsZero(o.Ops[i]) { // not required
			continue
		}

		if o.Ops[i] != nil {
			if err := o.Ops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Proof" + "." + "ops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result o k body result kv results items0 proof based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0Proof) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0Proof) contextValidateOps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Ops); i++ {

		if o.Ops[i] != nil {
			if err := o.Ops[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Proof" + "." + "ops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0Proof) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0Proof) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0Proof
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0ProofOpsItems0 ProofOp defines an operation used for calculating Merkle root
// The data could be arbitrary format, providing nessecary data
// for example neighbouring node hash
swagger:model NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0ProofOpsItems0
*/
type NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0ProofOpsItems0 struct {

	// data
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// key
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result o k body result kv results items0 proof ops items0
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0ProofOpsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result o k body result kv results items0 proof ops items0 based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0ProofOpsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0ProofOpsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0ProofOpsItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultOKBodyResultKvResultsItems0ProofOpsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
