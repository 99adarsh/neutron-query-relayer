// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new query API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for query API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NeutronInterchainadapterInterchainqueriesLastRemoteHeight(params *NeutronInterchainadapterInterchainqueriesLastRemoteHeightParams, opts ...ClientOption) (*NeutronInterchainadapterInterchainqueriesLastRemoteHeightOK, error)

	NeutronInterchainadapterInterchainqueriesParams(params *NeutronInterchainadapterInterchainqueriesParamsParams, opts ...ClientOption) (*NeutronInterchainadapterInterchainqueriesParamsOK, error)

	NeutronInterchainadapterInterchainqueriesQueryResult(params *NeutronInterchainadapterInterchainqueriesQueryResultParams, opts ...ClientOption) (*NeutronInterchainadapterInterchainqueriesQueryResultOK, error)

	NeutronInterchainadapterInterchainqueriesRegisteredQueries(params *NeutronInterchainadapterInterchainqueriesRegisteredQueriesParams, opts ...ClientOption) (*NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK, error)

	NeutronInterchainadapterInterchainqueriesRegisteredQuery(params *NeutronInterchainadapterInterchainqueriesRegisteredQueryParams, opts ...ClientOption) (*NeutronInterchainadapterInterchainqueriesRegisteredQueryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  NeutronInterchainadapterInterchainqueriesLastRemoteHeight neutron interchainadapter interchainqueries last remote height API
*/
func (a *Client) NeutronInterchainadapterInterchainqueriesLastRemoteHeight(params *NeutronInterchainadapterInterchainqueriesLastRemoteHeightParams, opts ...ClientOption) (*NeutronInterchainadapterInterchainqueriesLastRemoteHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNeutronInterchainadapterInterchainqueriesLastRemoteHeightParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NeutronInterchainadapterInterchainqueriesLastRemoteHeight",
		Method:             "GET",
		PathPattern:        "/neutron/interchainqueries/interchainqueries/remote_height",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NeutronInterchainadapterInterchainqueriesLastRemoteHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NeutronInterchainadapterInterchainqueriesLastRemoteHeightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NeutronInterchainadapterInterchainqueriesLastRemoteHeightDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NeutronInterchainadapterInterchainqueriesParams parameters queries the parameters of the module
*/
func (a *Client) NeutronInterchainadapterInterchainqueriesParams(params *NeutronInterchainadapterInterchainqueriesParamsParams, opts ...ClientOption) (*NeutronInterchainadapterInterchainqueriesParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNeutronInterchainadapterInterchainqueriesParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NeutronInterchainadapterInterchainqueriesParams",
		Method:             "GET",
		PathPattern:        "/neutron/interchainqueries/interchainqueries/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NeutronInterchainadapterInterchainqueriesParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NeutronInterchainadapterInterchainqueriesParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NeutronInterchainadapterInterchainqueriesParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NeutronInterchainadapterInterchainqueriesQueryResult neutron interchainadapter interchainqueries query result API
*/
func (a *Client) NeutronInterchainadapterInterchainqueriesQueryResult(params *NeutronInterchainadapterInterchainqueriesQueryResultParams, opts ...ClientOption) (*NeutronInterchainadapterInterchainqueriesQueryResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNeutronInterchainadapterInterchainqueriesQueryResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NeutronInterchainadapterInterchainqueriesQueryResult",
		Method:             "GET",
		PathPattern:        "/neutron/interchainqueries/interchainqueries/query_result",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NeutronInterchainadapterInterchainqueriesQueryResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NeutronInterchainadapterInterchainqueriesQueryResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NeutronInterchainadapterInterchainqueriesQueryResultDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NeutronInterchainadapterInterchainqueriesRegisteredQueries neutron interchainadapter interchainqueries registered queries API
*/
func (a *Client) NeutronInterchainadapterInterchainqueriesRegisteredQueries(params *NeutronInterchainadapterInterchainqueriesRegisteredQueriesParams, opts ...ClientOption) (*NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNeutronInterchainadapterInterchainqueriesRegisteredQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NeutronInterchainadapterInterchainqueriesRegisteredQueries",
		Method:             "GET",
		PathPattern:        "/neutron/interchainqueries/interchainqueries/registered_queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NeutronInterchainadapterInterchainqueriesRegisteredQueriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NeutronInterchainadapterInterchainqueriesRegisteredQuery neutron interchainadapter interchainqueries registered query API
*/
func (a *Client) NeutronInterchainadapterInterchainqueriesRegisteredQuery(params *NeutronInterchainadapterInterchainqueriesRegisteredQueryParams, opts ...ClientOption) (*NeutronInterchainadapterInterchainqueriesRegisteredQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNeutronInterchainadapterInterchainqueriesRegisteredQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NeutronInterchainadapterInterchainqueriesRegisteredQuery",
		Method:             "GET",
		PathPattern:        "/neutron/interchainqueries/interchainqueries/registered_query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NeutronInterchainadapterInterchainqueriesRegisteredQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NeutronInterchainadapterInterchainqueriesRegisteredQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
