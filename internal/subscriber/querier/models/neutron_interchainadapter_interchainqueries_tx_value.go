// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NeutronInterchainadapterInterchainqueriesTxValue neutron interchainadapter interchainqueries tx value
//
// swagger:model neutron.interchainadapter.interchainqueries.TxValue
type NeutronInterchainadapterInterchainqueriesTxValue struct {

	// is body of the transaction
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// delivery proof
	DeliveryProof *NeutronInterchainadapterInterchainqueriesTxValueDeliveryProof `json:"delivery_proof,omitempty"`

	// inclusion proof
	InclusionProof *NeutronInterchainadapterInterchainqueriesTxValueInclusionProof `json:"inclusion_proof,omitempty"`

	// response
	Response *NeutronInterchainadapterInterchainqueriesTxValueResponse `json:"response,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries tx value
func (m *NeutronInterchainadapterInterchainqueriesTxValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeliveryProof(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInclusionProof(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesTxValue) validateDeliveryProof(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryProof) { // not required
		return nil
	}

	if m.DeliveryProof != nil {
		if err := m.DeliveryProof.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delivery_proof")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesTxValue) validateInclusionProof(formats strfmt.Registry) error {
	if swag.IsZero(m.InclusionProof) { // not required
		return nil
	}

	if m.InclusionProof != nil {
		if err := m.InclusionProof.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inclusion_proof")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesTxValue) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries tx value based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesTxValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeliveryProof(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInclusionProof(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesTxValue) contextValidateDeliveryProof(ctx context.Context, formats strfmt.Registry) error {

	if m.DeliveryProof != nil {
		if err := m.DeliveryProof.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delivery_proof")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesTxValue) contextValidateInclusionProof(ctx context.Context, formats strfmt.Registry) error {

	if m.InclusionProof != nil {
		if err := m.InclusionProof.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inclusion_proof")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesTxValue) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.Response != nil {
		if err := m.Response.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValue) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesTxValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesTxValueDeliveryProof is the Merkle Proof which proves existence of response in block with height next_block_header.Height
//
// swagger:model NeutronInterchainadapterInterchainqueriesTxValueDeliveryProof
type NeutronInterchainadapterInterchainqueriesTxValueDeliveryProof struct {

	// aunts
	Aunts []strfmt.Base64 `json:"aunts"`

	// index
	Index string `json:"index,omitempty"`

	// leaf hash
	// Format: byte
	LeafHash strfmt.Base64 `json:"leaf_hash,omitempty"`

	// total
	Total string `json:"total,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries tx value delivery proof
func (m *NeutronInterchainadapterInterchainqueriesTxValueDeliveryProof) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries tx value delivery proof based on context it is used
func (m *NeutronInterchainadapterInterchainqueriesTxValueDeliveryProof) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValueDeliveryProof) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValueDeliveryProof) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesTxValueDeliveryProof
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesTxValueInclusionProof is the Merkle Proof which proves existence of data in block with height header.Height
//
// swagger:model NeutronInterchainadapterInterchainqueriesTxValueInclusionProof
type NeutronInterchainadapterInterchainqueriesTxValueInclusionProof struct {

	// aunts
	Aunts []strfmt.Base64 `json:"aunts"`

	// index
	Index string `json:"index,omitempty"`

	// leaf hash
	// Format: byte
	LeafHash strfmt.Base64 `json:"leaf_hash,omitempty"`

	// total
	Total string `json:"total,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries tx value inclusion proof
func (m *NeutronInterchainadapterInterchainqueriesTxValueInclusionProof) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries tx value inclusion proof based on context it is used
func (m *NeutronInterchainadapterInterchainqueriesTxValueInclusionProof) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValueInclusionProof) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValueInclusionProof) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesTxValueInclusionProof
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesTxValueResponse neutron interchainadapter interchainqueries tx value response
//
// swagger:model NeutronInterchainadapterInterchainqueriesTxValueResponse
type NeutronInterchainadapterInterchainqueriesTxValueResponse struct {

	// code
	Code int64 `json:"code,omitempty"`

	// codespace
	Codespace string `json:"codespace,omitempty"`

	// data
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// events
	Events []*NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0 `json:"events"`

	// gas used
	GasUsed string `json:"gas_used,omitempty"`

	// gas wanted
	GasWanted string `json:"gas_wanted,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// log
	Log string `json:"log,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries tx value response
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesTxValueResponse) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + "events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries tx value response based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesTxValueResponse) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if m.Events[i] != nil {
			if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + "events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponse) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesTxValueResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0 Event allows application developers to attach additional information to
// ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
// Later, transactions may be queried using these events.
//
// swagger:model NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0
type NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0 struct {

	// attributes
	Attributes []*NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0AttributesItems0 `json:"attributes"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries tx value response events items0
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries tx value response events items0 based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attributes); i++ {

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0AttributesItems0 EventAttribute is a single key-value pair, associated with an event.
//
// swagger:model NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0AttributesItems0
type NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0AttributesItems0 struct {

	// index
	Index bool `json:"index,omitempty"`

	// key
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries tx value response events items0 attributes items0
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0AttributesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries tx value response events items0 attributes items0 based on context it is used
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0AttributesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0AttributesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0AttributesItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesTxValueResponseEventsItems0AttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
