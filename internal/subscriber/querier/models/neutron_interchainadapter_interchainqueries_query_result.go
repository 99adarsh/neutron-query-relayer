// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NeutronInterchainadapterInterchainqueriesQueryResult neutron interchainadapter interchainqueries query result
//
// swagger:model neutron.interchainadapter.interchainqueries.QueryResult
type NeutronInterchainadapterInterchainqueriesQueryResult struct {

	// allow kv callbacks
	AllowKvCallbacks bool `json:"allow_kv_callbacks,omitempty"`

	// block
	Block *NeutronInterchainadapterInterchainqueriesQueryResultBlock `json:"block,omitempty"`

	// height
	Height string `json:"height,omitempty"`

	// kv results
	KvResults []*NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0 `json:"kv_results"`

	// revision
	Revision string `json:"revision,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result
func (m *NeutronInterchainadapterInterchainqueriesQueryResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKvResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResult) validateBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.Block) { // not required
		return nil
	}

	if m.Block != nil {
		if err := m.Block.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResult) validateKvResults(formats strfmt.Registry) error {
	if swag.IsZero(m.KvResults) { // not required
		return nil
	}

	for i := 0; i < len(m.KvResults); i++ {
		if swag.IsZero(m.KvResults[i]) { // not required
			continue
		}

		if m.KvResults[i] != nil {
			if err := m.KvResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kv_results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKvResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResult) contextValidateBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.Block != nil {
		if err := m.Block.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResult) contextValidateKvResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KvResults); i++ {

		if m.KvResults[i] != nil {
			if err := m.KvResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kv_results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResult) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultBlock neutron interchainadapter interchainqueries query result block
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultBlock
type NeutronInterchainadapterInterchainqueriesQueryResultBlock struct {

	// header
	Header *NeutronInterchainadapterInterchainqueriesQueryResultBlockHeader `json:"header,omitempty"`

	// next block header
	NextBlockHeader *NeutronInterchainadapterInterchainqueriesQueryResultBlockNextBlockHeader `json:"next_block_header,omitempty"`

	// tx
	Tx *NeutronInterchainadapterInterchainqueriesQueryResultBlockTx `json:"tx,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result block
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextBlockHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlock) validateHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.Header) { // not required
		return nil
	}

	if m.Header != nil {
		if err := m.Header.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "header")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlock) validateNextBlockHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.NextBlockHeader) { // not required
		return nil
	}

	if m.NextBlockHeader != nil {
		if err := m.NextBlockHeader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "next_block_header")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlock) validateTx(formats strfmt.Registry) error {
	if swag.IsZero(m.Tx) { // not required
		return nil
	}

	if m.Tx != nil {
		if err := m.Tx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result block based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNextBlockHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlock) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	if m.Header != nil {
		if err := m.Header.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "header")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlock) contextValidateNextBlockHeader(ctx context.Context, formats strfmt.Registry) error {

	if m.NextBlockHeader != nil {
		if err := m.NextBlockHeader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "next_block_header")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlock) contextValidateTx(ctx context.Context, formats strfmt.Registry) error {

	if m.Tx != nil {
		if err := m.Tx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlock) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultBlockHeader We need to know block X to verify inclusion of transaction for block X
//
// `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := anypb.New(foo)
//      if err != nil {
//        ...
//      }
//      ...
//      foo := &pb.Foo{}
//      if err := any.UnmarshalTo(foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultBlockHeader
type NeutronInterchainadapterInterchainqueriesQueryResultBlockHeader struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	AtType string `json:"@type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result block header
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockHeader) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result block header based on context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockHeader) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultBlockHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultBlockNextBlockHeader We need to know block X+1 to verify response of transaction for block X
// since LastResultsHash is root hash of all results from the txs from the previous block
//
// `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := anypb.New(foo)
//      if err != nil {
//        ...
//      }
//      ...
//      foo := &pb.Foo{}
//      if err := any.UnmarshalTo(foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultBlockNextBlockHeader
type NeutronInterchainadapterInterchainqueriesQueryResultBlockNextBlockHeader struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	AtType string `json:"@type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result block next block header
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockNextBlockHeader) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result block next block header based on context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockNextBlockHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockNextBlockHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockNextBlockHeader) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultBlockNextBlockHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultBlockTx neutron interchainadapter interchainqueries query result block tx
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultBlockTx
type NeutronInterchainadapterInterchainqueriesQueryResultBlockTx struct {

	// is body of the transaction
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// delivery proof
	DeliveryProof *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxDeliveryProof `json:"delivery_proof,omitempty"`

	// inclusion proof
	InclusionProof *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxInclusionProof `json:"inclusion_proof,omitempty"`

	// response
	Response *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponse `json:"response,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result block tx
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeliveryProof(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInclusionProof(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTx) validateDeliveryProof(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryProof) { // not required
		return nil
	}

	if m.DeliveryProof != nil {
		if err := m.DeliveryProof.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "tx" + "." + "delivery_proof")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTx) validateInclusionProof(formats strfmt.Registry) error {
	if swag.IsZero(m.InclusionProof) { // not required
		return nil
	}

	if m.InclusionProof != nil {
		if err := m.InclusionProof.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "tx" + "." + "inclusion_proof")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTx) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "tx" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result block tx based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeliveryProof(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInclusionProof(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTx) contextValidateDeliveryProof(ctx context.Context, formats strfmt.Registry) error {

	if m.DeliveryProof != nil {
		if err := m.DeliveryProof.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "tx" + "." + "delivery_proof")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTx) contextValidateInclusionProof(ctx context.Context, formats strfmt.Registry) error {

	if m.InclusionProof != nil {
		if err := m.InclusionProof.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "tx" + "." + "inclusion_proof")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTx) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.Response != nil {
		if err := m.Response.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "tx" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTx) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultBlockTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultBlockTxDeliveryProof is the Merkle Proof which proves existence of response in block with height next_block_header.Height
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultBlockTxDeliveryProof
type NeutronInterchainadapterInterchainqueriesQueryResultBlockTxDeliveryProof struct {

	// aunts
	Aunts []strfmt.Base64 `json:"aunts"`

	// index
	Index string `json:"index,omitempty"`

	// leaf hash
	// Format: byte
	LeafHash strfmt.Base64 `json:"leaf_hash,omitempty"`

	// total
	Total string `json:"total,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result block tx delivery proof
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxDeliveryProof) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result block tx delivery proof based on context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxDeliveryProof) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxDeliveryProof) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxDeliveryProof) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultBlockTxDeliveryProof
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultBlockTxInclusionProof is the Merkle Proof which proves existence of data in block with height header.Height
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultBlockTxInclusionProof
type NeutronInterchainadapterInterchainqueriesQueryResultBlockTxInclusionProof struct {

	// aunts
	Aunts []strfmt.Base64 `json:"aunts"`

	// index
	Index string `json:"index,omitempty"`

	// leaf hash
	// Format: byte
	LeafHash strfmt.Base64 `json:"leaf_hash,omitempty"`

	// total
	Total string `json:"total,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result block tx inclusion proof
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxInclusionProof) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result block tx inclusion proof based on context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxInclusionProof) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxInclusionProof) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxInclusionProof) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultBlockTxInclusionProof
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponse neutron interchainadapter interchainqueries query result block tx response
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponse
type NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponse struct {

	// code
	Code int64 `json:"code,omitempty"`

	// codespace
	Codespace string `json:"codespace,omitempty"`

	// data
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// events
	Events []*NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0 `json:"events"`

	// gas used
	GasUsed string `json:"gas_used,omitempty"`

	// gas wanted
	GasWanted string `json:"gas_wanted,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// log
	Log string `json:"log,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result block tx response
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponse) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("block" + "." + "tx" + "." + "response" + "." + "events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result block tx response based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponse) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if m.Events[i] != nil {
			if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("block" + "." + "tx" + "." + "response" + "." + "events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponse) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0 Event allows application developers to attach additional information to
// ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
// Later, transactions may be queried using these events.
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0
type NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0 struct {

	// attributes
	Attributes []*NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0AttributesItems0 `json:"attributes"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result block tx response events items0
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result block tx response events items0 based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attributes); i++ {

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0AttributesItems0 EventAttribute is a single key-value pair, associated with an event.
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0AttributesItems0
type NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0AttributesItems0 struct {

	// index
	Index bool `json:"index,omitempty"`

	// key
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result block tx response events items0 attributes items0
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0AttributesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result block tx response events items0 attributes items0 based on context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0AttributesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0AttributesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0AttributesItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultBlockTxResponseEventsItems0AttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0 neutron interchainadapter interchainqueries query result kv results items0
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0
type NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0 struct {

	// proof
	Proof *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0Proof `json:"Proof,omitempty"`

	// is the key in IAVL store
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// is the substore name (acc, staking, etc.)
	StoragePrefix string `json:"storage_prefix,omitempty"`

	// is the value in IAVL store
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result kv results items0
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProof(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0) validateProof(formats strfmt.Registry) error {
	if swag.IsZero(m.Proof) { // not required
		return nil
	}

	if m.Proof != nil {
		if err := m.Proof.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Proof")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result kv results items0 based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProof(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0) contextValidateProof(ctx context.Context, formats strfmt.Registry) error {

	if m.Proof != nil {
		if err := m.Proof.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Proof")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0Proof is the Merkle Proof which proves existence of key-value pair in IAVL storage
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0Proof
type NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0Proof struct {

	// ops
	Ops []*NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0ProofOpsItems0 `json:"ops"`
}

// Validate validates this neutron interchainadapter interchainqueries query result kv results items0 proof
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0Proof) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0Proof) validateOps(formats strfmt.Registry) error {
	if swag.IsZero(m.Ops) { // not required
		return nil
	}

	for i := 0; i < len(m.Ops); i++ {
		if swag.IsZero(m.Ops[i]) { // not required
			continue
		}

		if m.Ops[i] != nil {
			if err := m.Ops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Proof" + "." + "ops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query result kv results items0 proof based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0Proof) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0Proof) contextValidateOps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ops); i++ {

		if m.Ops[i] != nil {
			if err := m.Ops[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Proof" + "." + "ops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0Proof) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0Proof) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0Proof
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0ProofOpsItems0 ProofOp defines an operation used for calculating Merkle root
// The data could be arbitrary format, providing nessecary data
// for example neighbouring node hash
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0ProofOpsItems0
type NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0ProofOpsItems0 struct {

	// data
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// key
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query result kv results items0 proof ops items0
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0ProofOpsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query result kv results items0 proof ops items0 based on context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0ProofOpsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0ProofOpsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0ProofOpsItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryResultKvResultsItems0ProofOpsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
